A) Functions and Intent# Topic Name
	I) Functions and Intent #Topic Description
		1) Description: Functions are small independent processes that accept parameters and, optionally, return values based on the parameters they are given and the code they contain. Functions have scope, that is they can contain variables that only they know about.
		2) Why: Well designed systems consist of functions. They allow reusability of code. They also are the way code is organized in applications. 
		3) When: Any time code duplication would be requried to accomplish tasks, a function should be produced. If the code is overly long, it should be broken into functions.
	II) Functions and Intent #Topic Examples
		 1. def func1(first_number, second_number):
		    return first_number + second_number

		 2. def func2(number):
		    if number % 2 == 0:
		        return True
		    else:
		        return False

		 3. def func3(start_value, end_value):
		    number_list = []
		    current_number = start_value
		    while current_number <= end_value:
		        number_list.append(current_number)
		        current_number += 1
		    return number_list

		 4. def func4(number):
		    factorial_result = 1
		    current_factor = 1
		    while current_factor <= number:
		        factorial_result = factorial_result * current_factor
		        current_factor += 1
		    return factorial_result

		 5. def func5(position):
		    if position == 1:
		        return 0
		    elif position == 2:
		        return 1
		    previous_value = 0
		    current_value = 1
		    index = 2
		    while index < position:
		        next_value = previous_value + current_value
		        previous_value = current_value
		        current_value = next_value
		        index += 1
		    return current_value

		 6. def func6(input_string):
		    reversed_string = ""
		    index = len(input_string) - 1
		    while index >= 0:
		        reversed_string = reversed_string + input_string[index]
		        index -= 1
		    return reversed_string

		 7. def func7(input_string):
		    vowels = "aeiouAEIOU"
		    vowel_count = 0
		    for character in input_string:
		        if character in vowels:
		            vowel_count += 1
		    return vowel_count

		 8. def func8(number_list):
		    maximum_value = number_list[0]
		    index = 1
		    while index < len(number_list):
		        if number_list[index] > maximum_value:
		            maximum_value = number_list[index]
		        index += 1
		    return maximum_value

		 9. def func9(input_string, character):
		    letter_count = 0
		    for letter in input_string:
		        if letter == character:
		            letter_count += 1
		    return letter_count

		 10. def func10(number):
		    if number <= 1:
		        return False
		    divisor = 2
		    while divisor < number:
		        if number % divisor == 0:
		            return False
		        divisor += 1
		    return True

		 11. def func11(number):
		    multiplication_table = []
		    multiplier = 1
		    while multiplier <= 10:
		        multiplication_table.append(number * multiplier)
		        multiplier += 1
		    return multiplication_table

		 12. def func12(number):
		    digit_sum = 0
		    while number > 0:
		        digit_sum = digit_sum + (number % 10)
		        number = number // 10
		    return digit_sum

		 13. def func13(input_string):
		    left_index = 0
		    right_index = len(input_string) - 1
		    while left_index < right_index:
		        if input_string[left_index] != input_string[right_index]:
		            return False
		        left_index += 1
		        right_index -= 1
		    return True

		 16. def func16(max_number):
		    even_numbers = []
		    current_number = 1
		    while current_number <= max_number:
		        if current_number % 2 == 0:
		            even_numbers.append(current_number)
		        current_number += 1
		    return even_numbers

		 17. def func17(sentence):
		    word_list = sentence.split(" ")
		    word_count = 0
		    for word in word_list:
		        if word != "":
		            word_count += 1
		    return word_count

		 18. def func18(list_one, list_two):
		    common_items = []
		    for item in list_one:
		        if item in list_two and item not in common_items:
		            common_items.append(item)
		    return common_items

		 19. def func19(count):
		    primes = []
		    candidate = 2
		    while len(primes) < count:
		        if func10(candidate):
		            primes.append(candidate)
		        candidate += 1
		    return primes

		 20. def func20(base_value, exponent):
		    power_result = 1
		    counter = 0
		    while counter < exponent:
		        power_result = power_result * base_value
		        counter += 1
		    return power_result

B) Using BIFs (Built-In-Functions)# Topic Name
	I) Using BIFs (Built-In-Functions) #Topic Description
		1) Description: BIFs are functions created and supported by the python community. They are included in the standard download, not in libraries that can be added to Python.
		2) Why: There are many pieces of functionallity that are repeatedly used world wide when writing Python applications. Rather than have each programmer write them for themselves, they are written, debugged, and hardened by the entire python community. This means they tend to run faster and have fewer bugs than if someone wrote their own versions of these functions 
		3) When: Any time a BIF exists that can be used to accomplish what is needed in the application it should be used. Writing code that does the same thing as the BIF is always a bad idea.
	II) Using BIFs (Built-In-Functions) #Topic Examples
		1. def func1(numbers):
		    return (len(numbers), sorted(numbers))

		2. def func2(numbers):
		    return (min(numbers), max(numbers))

		3. def func3(strings):
		    return list(map(len, strings))

		4. def func4(numbers):
		    return sorted(set(numbers))

		5. def func5(numbers):
		    total = sum(numbers)
		    count = len(numbers)
		    return total / count if count != 0 else 0

		6. def func6(s):
		    return (list(s), len(s))

		7. def func7(start, end):
		    number_range = list(range(start, end))
		    return (number_range, sum(number_range))

		8. def func8(lst):
		    return (list(reversed(lst)), len(lst))

		9. def func9(dictionary):
		    return (sorted(dictionary.keys()), list(dictionary.values()))

		10. def func10(numbers):
		    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
		    return (len(even_numbers), sum(even_numbers))

		11. def func11(s):
		    words = s.split()
		    return (sorted(words), len(words))

		12. def func12(lst):
		    return (max(lst, default=0), min(lst, default=0))

		13. def func13(numbers):
		    squared_numbers = list(map(lambda x: x * x, numbers))
		    return (squared_numbers, sum(squared_numbers))

		14. def func14(s):
		    unique_chars = set(s)
		    return (sorted(unique_chars), len(unique_chars))

		15. def func15(dictionary):
		    return (list(dictionary.items()), sorted(dictionary.values()))

		16. def func16(lst):
		    return (list(enumerate(lst)), len(lst))

		17. def func17(lst):
		    positive_numbers = list(filter(lambda x: x > 0, lst))
		    return (positive_numbers, sum(positive_numbers))

		18. def func18(s):
		    frequencies = {char: s.count(char) for char in set(s)}
		    return (sorted(frequencies.items()), len(frequencies))

		19. def func19(lst):
		    return list(reversed(sorted(lst)))

		20. def func20(numbers):
		    numbers_list = list(numbers)
		    average = sum(numbers_list) / len(numbers_list) if len(numbers_list) > 0 else 0
		    return (tuple(numbers_list), average)

C) Function Details# Topic Name
	I) Function Details# Topic Description
		1) Description: Function details include variadic functions, functions with a variable number of parameters, and default parameters for functions.
		2) Why: Variadic functions are very helpful when a series of values of the same type needs to be passed to a function, but the number of those values is variable. The number depends on where the function is called.

		A default parameter is very helpful when there is a value that is very commonly used and occasionally replaced by another value. Default parameters reduce the amount of code programmers have to write and also decrease the possibility of copy-paste bugs in the code.
		3) When: Any time you have an unknown number of variables of the same type, use variadic functions. Anytime there is a consistant, heavily used value for a parameter, use set a default value for that parameter.
	II) Function Details# Topic Examples
		1. def func1(*numbers):
    		return len(numbers), sorted(numbers)

		2. def func2(*numbers):
    		return min(numbers), max(numbers)


		3. def func3(*strings):
		    return [len(s) for s in strings]

		4. def func4(numbers=None):
		    numbers = numbers or []
		    return sorted(set(numbers))

		5. def func5(numbers=None):
		    numbers = numbers or []
		    total = sum(numbers)
		    count = len(numbers)
		    return total / count if count != 0 else 0

		6. def func6(s=''):
		    return list(s), len(s)

		7. def func7(start, end=0):
		    number_range = list(range(start, end))
		    return number_range, sum(number_range)

		8. def func8(*lst):
		    return list(reversed(lst)), len(lst)

		9. def func9(dictionary=None):
		    dictionary = dictionary or {}
		    return sorted(dictionary.keys()), list(dictionary.values())

		10. def func10(numbers=None):
			    numbers = numbers or []
			    selected_numbers = [x for x in numbers if x % 2 == 0]
    			return len(selected_numbers), sum(selected_numbers)

		11. def func11(s='', sep=' '):
		    pieces = s.split(sep)
		    return sorted(pieces), len(pieces)

		12 def func12(lst=None, default=0):
		    lst = lst or []
		    return max(lst, default=default), min(lst, default=default)

		13. def func13(*numbers):
			    result = [x * x for x in numbers]
			    return result, sum(result)

		14. def func14(s=''):
			    unique_chars = set(s)
			    return sorted(unique_chars), len(unique_chars)

		15. def func15(dictionary=None):
		    dictionary = dictionary or {}
		    return list(dictionary.items()), sorted(dictionary.values())

		16. def func16(*lst):
		    	return list(enumerate(lst)), len(lst)

		17. def func17(lst=None):
			    lst = lst or []
			    result = [x for x in lst if x > 0]
    			return result, sum(result)

		18. def func18(s=''):
		    result = {char: s.count(char) for char in set(s)}
		    return sorted(result.items()), len(result)

		19. def func19(*lst):
			    return list(reversed(sorted(lst)))

		20. def func20(numbers=None):
			    result = list(numbers) if numbers is not None else []
			    calculation = sum(result) / len(result) if result else 0
			    return tuple(result), calculation
	